// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  dni        String    @unique
  name       String
  username   String    @unique
  password   String
  phone      String
  occupation String
  role       Role      @default(ADMIN)
  areas      JobArea[]
  worker     Worker[]
  operation  Operation[]
  task       Task[]
}

model JobArea {
  id      Int      @id @default(autoincrement())
  name    String
  workers Worker[]
  id_user Int
  user    User     @relation(fields: [id_user], references: [id])
  operations Operation[]
}

model Worker {
  id       Int      @id @default(autoincrement())
  dni      String   @unique
  phone    String?  @unique
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  status   Status   @default(AVALIABLE)
  id_area  Int?
  jobArea  JobArea? @relation(fields: [id_area], references: [id])
  id_user  Int
  user     User     @relation(fields: [id_user], references: [id])
  operations Operation_Worker[]
}
model Operation{
  id Int @id @default(autoincrement())
  status StatusOperation @default(PENDING) 
  dateStart DateTime
  dateEnd DateTime
  timeStrat DateTime
  timeEnd DateTime
  id_user Int
  user User @relation(fields: [id_user], references: [id]) 
  id_area Int
  jobArea JobArea @relation(fields: [id_area], references: [id])
  id_task Int
  task Task @relation(fields: [id_task], references: [id])
  workers Operation_Worker[]
}

model Operation_Worker{
  id Int @id @default(autoincrement())
  id_operation Int
  operation Operation @relation(fields: [id_operation], references: [id])
  id_worker Int
  worker Worker @relation(fields: [id_worker], references: [id])
}

model Task{
  id Int @id @default(autoincrement())
  name String
  id_user Int
  user User @relation(fields: [id_user], references: [id])
  operations Operation[]
}

enum Role {
  ADMIN
  SUPERADMIN
}

enum Status {
  AVALIABLE
  ASSIGNED
  UNAVALIABLE
  DEACTIVATED
}

enum StatusOperation {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
}
